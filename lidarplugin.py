# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LidarPlugin
                                 A QGIS plugin
Manage large LIDAR dataset in map canvas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-04-13
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Lorenzo Sulli
        email                : lorenzo.sulli@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction, QMessageBox

from qgis.core import QgsVectorFileWriter, QgsWkbTypes, QgsFeature, \
    QgsMessageLog, QgsVectorLayer, QgsProject
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .lidarplugin_dialog import LidarPluginDialog

class LidarPlugin:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        
        ## Translator start - Not implemented##
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(self.plugin_dir, 'i18n',
                                   'LidarPlugin_{}.qm'.format(locale))
        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)
        ## Translator end ##
        
        # Create the dialog (after translation) and keep reference
        self.dlg = LidarPluginDialog(iface)
        # self.dlg.setModal(True) # delete? work from ui 
        # self.dlg.setParent(self.iface.mainWindow()) # not working: set Qdialog trasparent 
        self.dlg.setWindowFlags(Qt.WindowStaysOnTopHint)# always on top - Problem: hide some qgis standard dialog 

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&LidarPlugin')
        self.toolbar = self.iface.addToolBar(u'LidarPlugin')# addToolBar
        self.toolbar.setObjectName(u'LidarPlugin')

    # Translation -  Not implemented
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('LidarPlugin', message)

    # add icon and menu item
    def add_action(self, icon_path, text, callback, enabled_flag=True,
                   add_to_menu=True, add_to_toolbar=True, status_tip=None,
                   whats_this=None, parent=None):

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToRasterMenu(
                self.menu,
                action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/lidarplugin/icon.png'
        self.add_action(icon_path, text=self.tr(u'LidarPlugin'),
                        callback=self.run, parent=self.iface.mainWindow())

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginRasterMenu(
                self.tr(u'&LidarPlugin'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def generate(self):
        """ generate points on surface """
        
        vlayer = self.dlg.LayerBox.currentLayer()
        vprovider = vlayer.dataProvider()
        writer = QgsVectorFileWriter(self.dlg.pointEdit.text(), \
            self.dlg.encoding, vprovider.fields(), QgsWkbTypes.Point, \
            vprovider.crs(), "ESRI Shapefile")
        outFeat = QgsFeature()
        if self.dlg.selectedBox.isChecked():
            features = vlayer.selectedFeatures()
        else:
            features = vlayer.getFeatures()
        nElement = 0
        nError = 0
        for inFeat in features:
            nElement += 1
            inGeom = inFeat.geometry()
            if inGeom is None or not inFeat.hasGeometry() or \
               not inGeom.isGeosValid():
                QgsMessageLog.logMessage("Feature %d skipped (empty or invalid geometry)" % nElement, 'lidarplugin')
                nError += 1
                continue
            if inGeom.isMultipart():
                # find largest part in case of multipart
                maxarea = 0
                #tmpGeom = QgsGeometry()
                for part in inGeom.asGeometryCollection():
                    area = part.area()
                    if area > maxarea:
                        tmpGeom = part
                        maxarea = area
                inGeom = tmpGeom
            atMap = inFeat.attributes()
            outGeom = inGeom.pointOnSurface()
            outFeat.setAttributes(atMap)
            outFeat.setGeometry(outGeom)
            writer.addFeature(outFeat)
        del writer
        if nError > 0:
            QMessageBox.warning(None, "LidarPlugin", \
                self.tr("Invalid or empty geometries found, see log messages"))
        # add centroid shape to canvas


    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        if not self.dlg.isVisible():
            self.dlg.show()
            self.dlg.textdisplay.clear()
        # # Run the dialog event loop
        # result = self.dlg.exec_()
        # # See if OK was pressed
        # if result:
            # # generate points on surface
            # self.generate()
