# -*- coding: utf-8 -*-
"""
/***************************************************************************
 LidarPlugin
                                 A QGIS plugin
Manage LIDAR dataset in map canvas
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-04-13
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Lorenzo Sulli
        email                : lorenzo.sulli@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import time
import shutil

from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5 import QtCore
from PyQt5.QtWidgets import QMainWindow, QLabel
from PyQt5.QtWidgets import QGridLayout, QWidget, QApplication, QDesktopWidget

from qgis.core import QgsMapLayerProxyModel, QgsSettings, QgsCoordinateReferenceSystem 
from qgis.core import QgsHillshadeRenderer, QgsMapLayer, QgsRasterLayer, QgsApplication
from qgis.gui import QgsEncodingFileDialog
from osgeo import gdal
from .lidarplugin_help import LidarPluginHelp

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'lidarplugin_dialog_base.ui'))


class LidarPluginDialog(QtWidgets.QDialog, FORM_CLASS):
    """ dialog class for LidarPlugin QGIS3 plugin """
    def __init__(self, iface, parent=None):
        """Constructor."""
        super(LidarPluginDialog, self).__init__(parent)
        self.iface = iface
        self.setupUi(self)
        self.encoding = None
        # move near top right of desktop screen
        qtRectangle = self.frameGeometry()
        TopRightPoint = QDesktopWidget().availableGeometry().topRight()
        qtRectangle.moveTopRight(TopRightPoint)
        qtRectangle.translate(-30,30)
        self.move(qtRectangle.topLeft())
        # constructor for LayerBox control
        self.LayerBox.setFilters(QgsMapLayerProxyModel.PolygonLayer)
        self.LayerBox.currentIndexChanged.connect(self.sel_epsg)
        self.LayerBox.currentIndexChanged.connect(self.field_select)
        
        self.loadactivelayer_btn.setText("<<") 
        self.loadactivelayer_btn.setToolTip("Load active layer") 
        self.loadactivelayer_btn.clicked.connect(self.sel_active_layer)
        self.loadactivelayer_btn.clicked.connect(self.field_select)
        
        self.btn_applytoselect.setToolTip("Apply hlsd to select")
        self.btn_applytoselect.clicked.connect(self.apply_az_elev_zfactor)
        self.epsgfield_ckb.stateChanged.connect(self.sel_epsg)
        self.ckb_setdefault.stateChanged.connect(self.initialize_widgets)
        self.btn_browse_dir.clicked.connect(self.browse_dir)
        self.btn_copy_lidar.clicked.connect(self.copy_lidar_from_layer)
        #self.cancelBtn.clicked.connect(self.clear_selection)
        self.cancelBtn.clicked.connect(self.reject)
        self.btn_addlidar.clicked.connect(self.LoadLidarFromShape)
        self.AzimutDial.valueChanged.connect(self.changeAzimutSpinBox)
        self.AzimutSpinBox.valueChanged.connect(self.changeAzimutDial)
        self.ElevationSlider.valueChanged.connect(self.changeElevationSpinBox)
        self.ElevationSpinBox.valueChanged.connect(self.changeElevationSlider)
        self.btn_chk_field.clicked.connect(self.check_path)

        self.destination_copy_dir.textChanged.connect(self.check_directory)

    def initialize_widgets(self, event):
        """ initialize dialog widgets """
        if self.ckb_setdefault.isChecked():
            self.LayerBox.setEnabled(False)
            self.FieldPath_CBox.setEnabled(False)
            self.FieldEPSG_CBox.setEnabled(False)
            self.mQgsProjectionSelectionWidget.setEnabled(False)
            self.FieldEPSG_CBox.setEnabled(False)
            self.loadactivelayer_btn.setEnabled(False)
            self.epsgfield_ckb.setEnabled(False)
        else:
            self.LayerBox.setEnabled(True)
            self.FieldPath_CBox.setEnabled(True)
            self.FieldEPSG_CBox.setEnabled(True)
            self.LayerBox.setFilters(QgsMapLayerProxyModel.PolygonLayer)
            self.sel_active_layer()
            self.mQgsProjectionSelectionWidget.setEnabled(True)
            self.FieldEPSG_CBox.setEnabled(False)
            self.loadactivelayer_btn.setEnabled(True)
            self.epsgfield_ckb.setEnabled(True)
            self.sel_epsg()
    def check_directory(self):
        if os.path.exists(self.destination_copy_dir.text()):
            self.btn_copy_lidar.setEnabled(True)
        else:
            self.btn_copy_lidar.setEnabled(False)
        
    def sel_active_layer(self):
        """Get active layer in TOC, pass to tile index layer combo box and populate fields combo box
        --------------------------"""
        self.textdisplay.clear()
        if self.chk_help.isChecked():
            self.textdisplay.setText('Help: ' + self.sel_active_layer.__doc__)
        if self.ckb_setdefault.isChecked() == False:
            try:
                my_active_toc_layer=self.iface.activeLayer()
                # if active layer is a polygon layer set active layer in ComboBox, else get first one polygon layer 
                if (my_active_toc_layer.type() == QgsMapLayer.VectorLayer):
                    if (my_active_toc_layer.geometryType() == 2):
                        my_name_toc_layer = my_active_toc_layer.name()
                        # get index in ComboBox by name layer 
                        my_cb_index = self.LayerBox.findText(my_name_toc_layer)
                        # set active layer in TOC in ComboBox 
                        self.LayerBox.setCurrentIndex(my_cb_index)
                    else:
                        self.LayerBox.setCurrentIndex(0)
                else:
                    self.LayerBox.setCurrentIndex(0)
            except:
                self.LayerBox.setCurrentIndex(0)

    def field_select(self, event):
        """Populate field combo box from tile index layer
        --------------------------"""
        if self.ckb_setdefault.isChecked() == False:
            self.FieldPath_CBox.clear()
            self.FieldEPSG_CBox.clear()
            mylist_field1 = []
            mylist_field2 = []

            for field in self.get_user_input()[0].fields():
                mylist_field1.append(field.name())
            
            mylist_field2 =[field.name() for field in self.get_user_input()[0].fields()]

                    
            self.FieldPath_CBox.addItems(mylist_field1)
            self.FieldEPSG_CBox.addItems(mylist_field2)

    def sel_epsg(self):
        """ check/uncheck selectBox if selected layer changed """
        if self.epsgfield_ckb.isChecked():
            self.mQgsProjectionSelectionWidget.setEnabled(False)
            self.FieldEPSG_CBox.setEnabled(True)
        else:
            self.mQgsProjectionSelectionWidget.setEnabled(True)
            self.FieldEPSG_CBox.setEnabled(False)


    def get_user_input(self):
        """ get list of user input """
        vlayer = self.LayerBox.currentLayer()# get input Tile Index layer from LayerBox -Index 0
        my_path_fld = self.FieldPath_CBox.currentText()# get input field with path for LIDAR file - Index 1
        my_zfactorset = self.ZfactorSpinBox.value() # get z factor value - Index 2
        my_Azimut = self.AzimutSpinBox.value()# get azimut value - Index 3
        my_Elevation = self. ElevationSpinBox.value()# get elevation value - Index 4
        
        # get CRS (EPSG code) from cbox - Index 5
        if self.FieldEPSG_CBox.isEnabled():
            my_crs_system_fld = self.FieldEPSG_CBox.currentText()
            return vlayer, my_path_fld, my_zfactorset, my_Azimut, my_Elevation, my_crs_system_fld
        else:
            my_crs = self.mQgsProjectionSelectionWidget.crs()
            return vlayer, my_path_fld, my_zfactorset, my_Azimut, my_Elevation, my_crs

    def changeAzimutSpinBox(self):
        myDialValue= self.AzimutDial.value()
        if (myDialValue >= 0 and myDialValue <= 180):
            self.AzimutSpinBox.setValue(myDialValue+180)
        else:
            self.AzimutSpinBox.setValue(myDialValue-180)

    def changeAzimutDial(self):
        mySpinBoxValue= self.AzimutSpinBox.value()
        if (mySpinBoxValue >= 0 and mySpinBoxValue <= 180):
            self.AzimutDial.setValue(mySpinBoxValue+180)
        else:
            self.AzimutDial.setValue(mySpinBoxValue-180)
            
    def changeElevationSpinBox(self):
        mySliderValue= self.ElevationSlider.value()
        self.ElevationSpinBox.setValue(mySliderValue)
        
    def changeElevationSlider(self):
        myElevationSpinBoxValue= self.ElevationSpinBox.value()
        self.ElevationSlider.setValue(myElevationSpinBoxValue)

    def browse_file(self):
        """ open save layer dialog """
        settings = QgsSettings()
        dirName = settings.value("/UI/lastShapefileDir")
        encode = settings.value("/UI/encoding")
        # DirDialog = QtWidgets.QFileDialog.getExistingDirectory(self,"Choose Directory",dirName)
        fileDialog = QgsEncodingFileDialog(self, "Output virtual file", dirName,
                                           "Virtual file (*.vrt)", encode)
        fileDialog.setDefaultSuffix("vrt")
        fileDialog.setFileMode(QtWidgets.QFileDialog.AnyFile)
        fileDialog.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)
        if not fileDialog.exec_() == QtWidgets.QDialog.Accepted:
            return
        files = fileDialog.selectedFiles()
        self.VirtualFileEdit.setText(files[0])
        self.encoding = fileDialog.encoding()

    def browse_dir(self):
        """Select directory to copy the lidar file(s) selected in tile index layer
        --------------------------"""
        settings = QgsSettings()
        dirName = settings.value("/UI/lastShapefileDir")
        my_dir = QtWidgets.QFileDialog.getExistingDirectory(self,"Choose Directory",dirName, QtWidgets.QFileDialog.ShowDirsOnly)
        self.destination_copy_dir.setText(my_dir)
        print (self.destination_copy_dir.text())

        return my_dir
        
    
    def test_layer(self):
        """ check widgets """
        my_active_layer=self.iface.activeLayer()
        my_name_layer = my_active_layer.name()
        
             
        if len(self.LayerBox.currentText()) == 0:
            QtWidgets.QMessageBox.warning(self, "Lidarplugin", \
                QtWidgets.QApplication.translate("LidarPlugin", \
                "No polygon layer selected", None))
            return
        if len(self.VirtualFileEdit.text()) == 0:
            QtWidgets.QMessageBox.warning(self, "Lidarplugin", \
                QtWidgets.QApplication.translate("LidarPlugin", \
                "No point layer given", None))
            return
        #self.accept()
    
    def LoadLidarFromShape(self):
        """Load Lidar from feature selection in tile index layer and apply hillshading setting.
        ------------------------- """
        self.textdisplay.clear()
        
        if self.chk_help.isChecked():
            self.textdisplay.append('Help: ' + self.LoadLidarFromShape.__doc__)
        my_selection=self.get_user_input()[0].selectedFeatures()# get selection from input layer
        vprovider=self.get_user_input()[0].dataProvider()
        mytot_selection=len(my_selection) # count selection to manage output message

        #set name for vrt if checked
        if self.chk_vrtraster.isChecked():
            my_date_time_str = time.strftime("%Y_%m_%d_%H_%M_%S")
            my_vrt = 'Vrt_'+my_date_time_str+'.vrt'
            user_directory = QgsApplication.qgisSettingsDirPath() # save vrt file in user directory without user selection
            my_default_destdir = os.path.join(user_directory,'processing/outputs/').replace("\\","/")
            vrt_path = os.path.join(my_default_destdir, my_vrt)
            my_dtm_list_vrt = []
            
        my_count = 0
        my_count_none = 0
        
        if mytot_selection == 0:
            self.textdisplay.append("No feature selection in Layer: " + self.get_user_input()[0].name()+ ' - exit')
        else: 
            if self.chk_addfile.isChecked():
                self.textdisplay.setText("Start load LIDAR file")
            # add lidar from path field in features selection
            for feature in my_selection:
                my_count = my_count +1
                if self.chk_vrtraster.isChecked():
                    my_dtm_list_vrt.append(feature[self.get_user_input()[1]])
                if self.chk_addfile.isChecked():
                    if os.path.exists(feature[self.get_user_input()[1]])== False:
                        my_count_none = my_count_none+1
                    # manage raster projection by input user
                    else: 
                        lyr = self.iface.addRasterLayer(feature[self.get_user_input()[1]], os.path.basename(feature[self.get_user_input()[1]]))
                        if self.FieldEPSG_CBox.isEnabled():
                            #if (feature[self.get_user_input()[5]]).isValid(): 
                            lyr.setCrs(QgsCoordinateReferenceSystem(feature[self.get_user_input()[5]], QgsCoordinateReferenceSystem.EpsgCrsId))
                        else:
                            if self.get_user_input()[5].isValid():
                                lyr.setCrs(QgsCoordinateReferenceSystem(self.get_user_input()[5]))
                            else: 
                                pass
                        #set hillshading by input user
                        r = QgsHillshadeRenderer (lyr.dataProvider(), 1, self.get_user_input()[3], self.get_user_input()[4])
                        r.setZFactor (self.get_user_input()[2])
                        lyr.setRenderer(r)
                        # set progressbar and textdisplay when process is in progress
                        self.textdisplay.append(lyr.name()+ " add to project")
                        self.progress_bar.setValue(1+int(my_count/mytot_selection*100))
            # create vrt file from path field in Tile Index File
            if self.chk_vrtraster.isChecked():
                self.textdisplay.append("Start create Virtual Raster file")
                my_vrt_built = gdal.BuildVRT(vrt_path, my_dtm_list_vrt)
                self.progress_bar.setValue(25)
                my_vrt_built = None
                my_new_vrt = self.iface.addRasterLayer(vrt_path, my_vrt)
                self.progress_bar.setValue(50)
                time.sleep(0.5)
                # manage raster projection by input user
                if self.FieldEPSG_CBox.isEnabled():
                    my_new_vrt.setCrs(QgsCoordinateReferenceSystem(feature[self.get_user_input()[5]], QgsCoordinateReferenceSystem.EpsgCrsId))
                else:
                    if self.get_user_input()[5].isValid():
                        my_new_vrt.setCrs(QgsCoordinateReferenceSystem(self.get_user_input()[5]))
                    else: 
                        pass
                
                self.progress_bar.setValue(50)
                time.sleep(0.5)
                vrt_r = QgsHillshadeRenderer (my_new_vrt.dataProvider(), 1, self.get_user_input()[3], self.get_user_input()[4])
                vrt_r.setZFactor (self.get_user_input()[2])
                my_new_vrt.setRenderer(vrt_r)
                self.progress_bar.setValue(90)
                time.sleep(0.5)
                self.textdisplay.append("Create vrt file in default user folder: \n" + vrt_path)
            # set progressbar and textdisplay when all processes have done
            self.progress_bar.setValue(100)
            if my_count_none>0:
                self.textdisplay.append('Path field "' + self.get_user_input()[1]+'" return None type for ' +str(my_count_none) + ' record(s)' )
            self.textdisplay.append("Done")
            time.sleep(0.5)
            self.progress_bar.setValue(0)
            self.iface.setActiveLayer(self.get_user_input()[0])
     
    def apply_az_elev_zfactor(self):
        self.textdisplay.clear()
        my_err_layers = 0
        my_ok_layers = 0
        mylayers = self.iface.layerTreeView().selectedLayersRecursive()
        mylayers_count = len(mylayers)
        my_zfactorset = self.ZfactorSpinBox.value() 
        my_azimut = self.AzimutSpinBox.value()
        my_elevation = self.ElevationSpinBox.value()

        for my_raster in mylayers:
            if type(my_raster) is QgsRasterLayer:
                r = QgsHillshadeRenderer(my_raster.dataProvider(), 1, my_azimut, my_elevation)
                r.setZFactor(my_zfactorset)
                my_raster.setRenderer(r)
                my_ok_layers = my_ok_layers +1
                self.progress_bar.setValue(1+int(my_ok_layers/mylayers_count*100))
                self.textdisplay.append("Processing " + str(my_ok_layers) + " raster layer(s) \n")
            else:
                my_err_layers = my_err_layers+1

        time.sleep(0.5)
        self.progress_bar.setValue(100)
        self.iface.mapCanvas().refreshAllLayers()
        if my_err_layers >0:
            self.textdisplay.append(str(my_ok_layers) + " layers processing. Selection counts " + str(my_err_layers)
            + " no grid o raster layers")
        else:
            self.textdisplay.append("Done. " + str(my_ok_layers) + " layer(s) processing.")
        time.sleep(0.5)
        self.progress_bar.setValue(0)
    # function to test connect
    def def_test(self):
        QtWidgets.QMessageBox.warning(self, "Lidarplugin","funziona")
        
        
    def check_path(self):
        """Check field selected in combo box to verify and report valid path file for all record
        -------------------------"""
        self.textdisplay.clear()
        if self.chk_help.isChecked():
            self.textdisplay.append('Help: ' + self.check_path.__doc__)
        my_field_list = self.get_user_input()[0].fields()
        for f in my_field_list: 
            print (f.name(), f.typeName())
        my_field_index = my_field_list.indexFromName(self.get_user_input()[1])
        my_field_object = my_field_list[my_field_index]
        print (my_field_object.typeName())
        start_time = time.time()
        count_true=0
        count_false=0
        count_null=0
        count_tot = self.get_user_input()[0].featureCount()
        if my_field_object.typeName() == 'String':
            self.textdisplay.append('Check path file. Field: "' + self.get_user_input()[1]+'" - ' +my_field_object.typeName()+' - Valid type....')
            for f in self.get_user_input()[0].getFeatures():
                count_prog = count_true+count_false+count_null
                self.progress_bar.setValue(1+int(count_prog/count_tot*100))
                try:
                    if not (f[self.get_user_input()[1]]):
                        count_null = count_null+1
                        pass
                    else:
                        if os.path.isfile(f[self.get_user_input()[1]]):
                            count_true=count_true+1
                        else:
                            count_false=count_false+1
                except:
                    count_false=count_false+1
            tot_time = round ((time.time() - start_time),2)
            self.textdisplay.append('Record with valid file path:' + str(count_true) + '\n'+ 'Record with invalid file path:'
                                    + str(count_false) +'\n'+ 'Record with null value:' + str(count_null))
            time.sleep(0.5)
            self.progress_bar.setValue(0)
            return count_true, count_false, count_null, tot_time
        else:
            self.textdisplay.append('Check path file. Field: "' + self.get_user_input()[1]+ '" - ' +my_field_object.typeName()+' - Invalid type')

    def copy_lidar_from_layer(self):
        """Copy lidar file(s) from selected tile(s) in tile index layer
        --------------------------"""
        self.textdisplay.clear()

        if self.chk_help.isChecked():
            self.textdisplay.append('Help: ' + self.copy_lidar_from_layer.__doc__)
        # start of time measurement
        start_time = time.time()
        self.textdisplay.append("Start")
        
        my_destdir = self.destination_copy_dir.text()
        
        # create a directory from input in widget, useful only by direct user input
        if len(my_destdir) > 0:
            if os.path.exists(my_destdir)==False: 
                os.mkdir(my_destdir)
                

        # get input user
        my_selection=self.get_user_input()[0].selectedFeatures()# get selection from input layer
        vprovider=self.get_user_input()[0].dataProvider()
        
        # count selection to manage output message
        mytot_selection=len(my_selection) 
        # counter to check file existing
        my_file_exist=0
        my_file_nonexist=0
        my_file_error=0
        my_tot_file=my_file_exist+my_file_nonexist
        
        if len(my_selection) == 0:
            self.textdisplay.append ('Non è stato selezionato nessun oggetto nel layer shapefile '+self.get_user_input()[0])
        else:
            for feature in my_selection:
                if os.path.exists(feature[self.get_user_input()[1]]):
                    try:
                        shutil.copyfile(feature[self.get_user_input()[1]],my_destdir+'/'+os.path.basename(feature[self.get_user_input()[1]]))
                        self.progress_bar.setValue(1+int(my_tot_file+1/len(my_selection)*100))
                        self.textdisplay.append ('copiato file n. '+ str(my_file_exist+1)+' di ' + str(len(my_selection)))
                        my_file_exist = my_file_exist+1
                    except:
                        self.textdisplay.append('Error in copying file')
                else:
                    self.progress_bar.setValue(1+int(my_tot_file/len(my_selection)*100))
                    self.textdisplay.append ('file'+ self.get_user_input()[1]+ ' non trovato')
                    my_file_nonexist = my_file_nonexist+1
            self.textdisplay.append ('Procedura terminata.\nFile selezionati: ' +str(len(my_selection))+
            '.\nFile copiati: '+str(my_file_exist)+' in '+my_destdir+'.\nFile non trovati: '+str(my_file_nonexist) + 
            '.\nTempo totale procedura: ' + str(round ((time.time() - start_time),2)) + ' secondi')
            self.progress_bar.setValue(100)
            self.textdisplay.append("Done")
            time.sleep(0.5)
            self.progress_bar.setValue(0)